#include<stdio.h>
#include<stdlib.h>

typedef struct node
{
     struct node*right;
     struct node*left;
     int data;
}node;

node*create_node(int data)
{
    node*newnode = malloc(sizeof(node));
    newnode->left= NULL;
    newnode->right = NULL;
    newnode->data = data;
    return newnode;
}

node*insert_bst(node*root,int data)
{
    node*newnode = create_node(data);
    if(root==NULL)
    return newnode;

    if(root->data > data)
    root->left = insert_bst(root->left,data);
    else
    root->right = insert_bst(root->right,data);
    return root;
}

node*find_min(node*root)
{
    while(root->left!=NULL)
    root =root->left;
    return root;
}

node*delete(node*root,int data)
{
    if(root==NULL)
    return root;
    if(root->data > data)
    root->left = delete(root->left,data);
    else if(root->data < data)
    root->right = delete(root->right,data);
    else{
        node*temp = root;
        if(root->right==NULL)
        {
            root = root->left;
            free(temp);
            return root;
        }
        else if(root->left == NULL)
        {
            root = root->right;
            free(temp);
            return root;
        }
        else{
            node*succ = find_min(root->right);
             root->data = succ->data;
            root->right = delete(root->right,root->data);
        }
    }
    return root;
}

void inorder(node*root)
{
    if(root!=NULL)
    {
        inorder(root->left);
        printf("%d ",root->data);
        inorder(root->right);
    }
}

int main()
{
    int size;
    printf("enter size of array : ");
    scanf("%d",&size);

    int arr[size];
    printf("tree elements : ");
    for(int i =0;i<size;i++)
    scanf("%d",arr+i);
     
     node*root=NULL;
    for(int i=0;i<size;i++)
    {
       root = insert_bst(root,arr[i]);
    }
    inorder(root);

    printf("\nenter number u want to delete : ");
    int num;
    scanf("%d",&num);
    root = delete(root,num);
    inorder(root);
}
